// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
#nullable disable
using Microsoft.EntityFrameworkCore;
using Microsoft.Extensions.Configuration;
using SMMS.Repositories.NghiaHT.Models;

namespace SMMS.Repositories.NghiaHT.DBContext;

public partial class SU25_PRN232_SE1725_G2_SMMSContext : DbContext
{
    public SU25_PRN232_SE1725_G2_SMMSContext()
    {
    }

    public SU25_PRN232_SE1725_G2_SMMSContext(DbContextOptions<SU25_PRN232_SE1725_G2_SMMSContext> options)
        : base(options)
    {
    }

    public virtual DbSet<CheckUpScheduleHuyLq> CheckUpScheduleHuyLqs { get; set; }

    public virtual DbSet<EventTypePhucTm> EventTypePhucTms { get; set; }

    public virtual DbSet<HealthProfileTypesTienVln> HealthProfileTypesTienVlns { get; set; }

    public virtual DbSet<MedicalCheckupHuyLq> MedicalCheckupHuyLqs { get; set; }

    public virtual DbSet<MedicalEventPhucTm> MedicalEventPhucTms { get; set; }

    public virtual DbSet<MedicationCategoryQuanTn> MedicationCategoryQuanTns { get; set; }

    public virtual DbSet<MedicationQuanTn> MedicationQuanTns { get; set; }

    public virtual DbSet<RequestNghiaHt> RequestNghiaHts { get; set; }

    public virtual DbSet<StudentHealthProfilesTienVln> StudentHealthProfilesTienVlns { get; set; }

    public virtual DbSet<SystemUserAccount> SystemUserAccounts { get; set; }

    public virtual DbSet<VaccinationLongTn> VaccinationLongTns { get; set; }

    public virtual DbSet<VaccineTypeLongTn> VaccineTypeLongTns { get; set; }

    public static string GetConnectionString(string connectionStringName)
    {
        var config = new ConfigurationBuilder()
            .SetBasePath(AppDomain.CurrentDomain.BaseDirectory)
            .AddJsonFile("appsettings.json")
            .Build();

        string connectionString = config.GetConnectionString(connectionStringName);
        return connectionString;
    }

    protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)
        => optionsBuilder.UseSqlServer(GetConnectionString("DefaultConnection")).UseQueryTrackingBehavior(QueryTrackingBehavior.NoTracking);

    //    protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)
    //#warning To protect potentially sensitive information in your connection string, you should move it out of source code. You can avoid scaffolding the connection string by using the Name= syntax to read it from configuration - see https://go.microsoft.com/fwlink/?linkid=2131148. For more guidance on storing connection strings, see https://go.microsoft.com/fwlink/?LinkId=723263.
    //        => optionsBuilder.UseSqlServer("Data Source=DESKTOP-G114KKJ;Initial Catalog=SU25_PRN232_SE1725_G2_SchoolMedicalManagementSystem;Persist Security Info=True;User ID=sa;Password=1234567890;Encrypt=False");

    protected override void OnModelCreating(ModelBuilder modelBuilder)
    {
        modelBuilder.Entity<CheckUpScheduleHuyLq>(entity =>
        {
            entity.HasKey(e => e.CheckupScheduleHuyLqid).HasName("PK__CheckUpS__7FAE888540EC9652");

            entity.ToTable("CheckUpScheduleHuyLQ");

            entity.Property(e => e.CheckupScheduleHuyLqid).HasColumnName("CheckupScheduleHuyLQId");
            entity.Property(e => e.CheckUpName).HasMaxLength(100);
            entity.Property(e => e.Description).HasMaxLength(100);
        });

        modelBuilder.Entity<EventTypePhucTm>(entity =>
        {
            entity.HasKey(e => e.EventTypePhucTmid).HasName("PK__EventTyp__D94AC36C6C7D6270");

            entity.ToTable("EventTypePhucTM");

            entity.Property(e => e.EventTypePhucTmid).HasColumnName("EventTypePhucTMId");
            entity.Property(e => e.Description).HasMaxLength(100);
            entity.Property(e => e.SeverityLevel).HasMaxLength(100);
            entity.Property(e => e.TypeName).HasMaxLength(100);
        });

        modelBuilder.Entity<HealthProfileTypesTienVln>(entity =>
        {
            entity.HasKey(e => e.HealthProfileTypesTienVlnid).HasName("PK__HealthPr__DAED1B3C8AB813D3");

            entity.ToTable("HealthProfileTypesTienVLN");

            entity.Property(e => e.HealthProfileTypesTienVlnid).HasColumnName("HealthProfileTypesTienVLNId");
            entity.Property(e => e.Description).HasMaxLength(100);
            entity.Property(e => e.HealthProfileName).HasMaxLength(100);
        });

        modelBuilder.Entity<MedicalCheckupHuyLq>(entity =>
        {
            entity.HasKey(e => e.CheckupHuyLqid).HasName("PK__MedicalC__146E094126605071");

            entity.ToTable("MedicalCheckupHuyLQ");

            entity.Property(e => e.CheckupHuyLqid).HasColumnName("CheckupHuyLQId");
            entity.Property(e => e.BloodType).HasMaxLength(10);
            entity.Property(e => e.Bmi)
                .HasColumnType("decimal(10, 2)")
                .HasColumnName("BMI");
            entity.Property(e => e.CheckupDate).HasColumnType("datetime");
            entity.Property(e => e.CheckupScheduleHuyLqid).HasColumnName("CheckupScheduleHuyLQId");
            entity.Property(e => e.ConsultationDate).HasMaxLength(100);
            entity.Property(e => e.DentalHealth).HasMaxLength(100);
            entity.Property(e => e.HearingLeft).HasMaxLength(100);
            entity.Property(e => e.HearingRight).HasMaxLength(100);
            entity.Property(e => e.Height).HasColumnType("decimal(10, 2)");
            entity.Property(e => e.IsActive).HasDefaultValue(false);
            entity.Property(e => e.OtherFindings).HasMaxLength(100);
            entity.Property(e => e.Weight).HasColumnType("decimal(10, 2)");

            entity.HasOne(d => d.CheckupScheduleHuyLq).WithMany(p => p.MedicalCheckupHuyLqs)
                .HasForeignKey(d => d.CheckupScheduleHuyLqid)
                .HasConstraintName("FK__MedicalCh__Check__5070F446");
        });

        modelBuilder.Entity<MedicalEventPhucTm>(entity =>
        {
            entity.HasKey(e => e.MedicalEventPhucTmid).HasName("PK__MedicalE__B24A8EDFA26ADEFB");

            entity.ToTable("MedicalEventPhucTM");

            entity.Property(e => e.MedicalEventPhucTmid).HasColumnName("MedicalEventPhucTMId");
            entity.Property(e => e.BloodPressure).HasMaxLength(30);
            entity.Property(e => e.EventTypePhucTmid).HasColumnName("EventTypePhucTMId");
            entity.Property(e => e.FirstAidDetails).HasMaxLength(100);
            entity.Property(e => e.FollowUpNote).HasMaxLength(100);
            entity.Property(e => e.OccurredAt).HasColumnType("datetime");
            entity.Property(e => e.ReportedBy).HasMaxLength(100);
            entity.Property(e => e.Symptoms).HasMaxLength(100);
            entity.Property(e => e.Temperature).HasColumnType("decimal(18, 0)");

            entity.HasOne(d => d.EventTypePhucTm).WithMany(p => p.MedicalEventPhucTms)
                .HasForeignKey(d => d.EventTypePhucTmid)
                .HasConstraintName("FK__MedicalEv__Event__4BAC3F29");
        });

        modelBuilder.Entity<MedicationCategoryQuanTn>(entity =>
        {
            entity.HasKey(e => e.MedicationCategoryQuanTnid).HasName("PK__Medicati__58B4DA1AAEDDCDF0");

            entity.ToTable("MedicationCategoryQuanTN");

            entity.Property(e => e.MedicationCategoryQuanTnid).HasColumnName("MedicationCategoryQuanTNId");
            entity.Property(e => e.CategoryName).HasMaxLength(100);
            entity.Property(e => e.Description).HasMaxLength(100);
        });

        modelBuilder.Entity<MedicationQuanTn>(entity =>
        {
            entity.HasKey(e => e.MedicationQuanTnid).HasName("PK__Medicati__EC3AEDC47DA08A15");

            entity.ToTable("MedicationQuanTN");

            entity.Property(e => e.MedicationQuanTnid).HasColumnName("MedicationQuanTNId");
            entity.Property(e => e.Contraindications).HasMaxLength(100);
            entity.Property(e => e.Form).HasMaxLength(30);
            entity.Property(e => e.GenericName).HasMaxLength(100);
            entity.Property(e => e.Indications).HasMaxLength(100);
            entity.Property(e => e.IsApproved).HasDefaultValue(false);
            entity.Property(e => e.MedicationCategoryQuanTnid).HasColumnName("MedicationCategoryQuanTNId");
            entity.Property(e => e.MedicationName).HasMaxLength(100);
            entity.Property(e => e.SideEffects).HasMaxLength(100);
            entity.Property(e => e.StartDate).HasColumnType("datetime");
            entity.Property(e => e.Strength).HasMaxLength(30);

            entity.HasOne(d => d.MedicationCategoryQuanTn).WithMany(p => p.MedicationQuanTns)
                .HasForeignKey(d => d.MedicationCategoryQuanTnid)
                .HasConstraintName("FK__Medicatio__Medic__3B75D760");
        });

        modelBuilder.Entity<RequestNghiaHt>(entity =>
        {
            entity.HasKey(e => e.RequestNghiaHtid).HasName("PK__RequestN__0F934654D5C5BFE4");

            entity.ToTable("RequestNghiaHT");

            entity.Property(e => e.RequestNghiaHtid).HasColumnName("RequestNghiaHTId");
            entity.Property(e => e.Contraindications).HasMaxLength(100);
            entity.Property(e => e.CreatedDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.Dosage).HasMaxLength(100);
            entity.Property(e => e.Form).HasMaxLength(30);
            entity.Property(e => e.Frequency).HasMaxLength(100);
            entity.Property(e => e.Indications).HasMaxLength(100);
            entity.Property(e => e.Instruction).HasMaxLength(100);
            entity.Property(e => e.IsApproved).HasDefaultValue(false);
            entity.Property(e => e.MedicationCategoryQuanTnid).HasColumnName("MedicationCategoryQuanTNId");
            entity.Property(e => e.MedicationName).HasMaxLength(100);
            entity.Property(e => e.Reason).HasMaxLength(100);
            entity.Property(e => e.StartDate).HasColumnType("datetime");
            entity.Property(e => e.Strength).HasMaxLength(30);

            entity.HasOne(d => d.MedicationCategoryQuanTn).WithMany(p => p.RequestNghiaHts)
                .HasForeignKey(d => d.MedicationCategoryQuanTnid)
                .HasConstraintName("FK__RequestNg__Medic__5441852A");
        });

        modelBuilder.Entity<StudentHealthProfilesTienVln>(entity =>
        {
            entity.HasKey(e => e.StudentHealthProfilesTienVlnid).HasName("PK__StudentH__790C99B5602574AF");

            entity.ToTable("StudentHealthProfilesTienVLN");

            entity.Property(e => e.StudentHealthProfilesTienVlnid).HasColumnName("StudentHealthProfilesTienVLNId");
            entity.Property(e => e.Allergies).HasMaxLength(100);
            entity.Property(e => e.BloodType).HasMaxLength(10);
            entity.Property(e => e.Bmi)
                .HasColumnType("decimal(10, 2)")
                .HasColumnName("BMI");
            entity.Property(e => e.CreatedDate).HasColumnType("datetime");
            entity.Property(e => e.DentalHealth).HasMaxLength(100);
            entity.Property(e => e.FamilymedicalHistory).HasMaxLength(100);
            entity.Property(e => e.HealthProfileTypesTienVlnid).HasColumnName("HealthProfileTypesTienVLNId");
            entity.Property(e => e.Hearing).HasMaxLength(100);
            entity.Property(e => e.Height).HasColumnType("decimal(10, 2)");
            entity.Property(e => e.IsApproved).HasDefaultValue(false);
            entity.Property(e => e.PastSurgeries).HasMaxLength(100);
            entity.Property(e => e.Weight).HasColumnType("decimal(10, 2)");

            entity.HasOne(d => d.HealthProfileTypesTienVln).WithMany(p => p.StudentHealthProfilesTienVlns)
                .HasForeignKey(d => d.HealthProfileTypesTienVlnid)
                .HasConstraintName("FK__StudentHe__Healt__412EB0B6");
        });

        modelBuilder.Entity<SystemUserAccount>(entity =>
        {
            entity.HasKey(e => e.UserAccountId);

            entity.ToTable("System.UserAccount");

            entity.Property(e => e.UserAccountId).HasColumnName("UserAccountID");
            entity.Property(e => e.ApplicationCode).HasMaxLength(50);
            entity.Property(e => e.CreatedBy).HasMaxLength(50);
            entity.Property(e => e.CreatedDate).HasColumnType("datetime");
            entity.Property(e => e.Email)
                .IsRequired()
                .HasMaxLength(150);
            entity.Property(e => e.EmployeeCode)
                .IsRequired()
                .HasMaxLength(50);
            entity.Property(e => e.FullName)
                .IsRequired()
                .HasMaxLength(100);
            entity.Property(e => e.ModifiedBy).HasMaxLength(50);
            entity.Property(e => e.ModifiedDate).HasColumnType("datetime");
            entity.Property(e => e.Password)
                .IsRequired()
                .HasMaxLength(100);
            entity.Property(e => e.Phone)
                .IsRequired()
                .HasMaxLength(50);
            entity.Property(e => e.RequestCode).HasMaxLength(50);
            entity.Property(e => e.UserName)
                .IsRequired()
                .HasMaxLength(50);
        });

        modelBuilder.Entity<VaccinationLongTn>(entity =>
        {
            entity.HasKey(e => e.VaccinationLongTnid).HasName("PK__Vaccinat__80197F6EB5AD0BED");

            entity.ToTable("VaccinationLongTN");

            entity.Property(e => e.VaccinationLongTnid).HasColumnName("VaccinationLongTNId");
            entity.Property(e => e.ActualDate).HasColumnType("datetime");
            entity.Property(e => e.DoctorOrNurseName).HasMaxLength(100);
            entity.Property(e => e.FollowUpdate).HasColumnType("datetime");
            entity.Property(e => e.InjectionSite).HasMaxLength(100);
            entity.Property(e => e.Notes).HasMaxLength(100);
            entity.Property(e => e.ReactionAfterVaccination).HasMaxLength(100);
            entity.Property(e => e.ScheduleDate).HasColumnType("datetime");
            entity.Property(e => e.VaccineName).HasMaxLength(100);
            entity.Property(e => e.VaccineTypeLongTnid).HasColumnName("VaccineTypeLongTNId");

            entity.HasOne(d => d.VaccineTypeLongTn).WithMany(p => p.VaccinationLongTns)
                .HasForeignKey(d => d.VaccineTypeLongTnid)
                .HasConstraintName("FK__Vaccinati__Vacci__46E78A0C");
        });

        modelBuilder.Entity<VaccineTypeLongTn>(entity =>
        {
            entity.HasKey(e => e.VaccineTypeLongTnid).HasName("PK__VaccineT__2460A87C1E2A7118");

            entity.ToTable("VaccineTypeLongTN");

            entity.Property(e => e.VaccineTypeLongTnid).HasColumnName("VaccineTypeLongTNId");
            entity.Property(e => e.Description).HasMaxLength(100);
            entity.Property(e => e.TypeName).HasMaxLength(100);
        });

        OnModelCreatingPartial(modelBuilder);
    }

    partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
}